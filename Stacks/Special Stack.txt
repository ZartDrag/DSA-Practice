//{ Driver Code Starts
#include<iostream>
#include<stack>
using namespace std;
void push(stack<int>& s,int a);
bool isFull(stack<int>& s,int n);
bool isEmpty(stack<int>& s);
int pop(stack<int>& s);
int getMin(stack<int>& s);
//This is the STL stack (http://quiz.geeksforgeeks.org/stack-container-adaptors-the-c-standard-template-library-stl/).
stack<int> s;
int main(){
	int t;
	cin>>t;
	while(t--){
		int n,a;
		cin>>n;
		while(!isEmpty(s)){
		    pop(s);
		}
		while(!isFull(s,n)){
			cin>>a;
			push(s,a);
		}
		cout<<getMin(s)<<endl;
	}
}
// } Driver Code Ends

int mini = -1;   //would hold the minimum value
const int dummy = 100000;   
                //some random dummy value that wouldn't be pushed into the stack 
                //(chose bigger than the constraints in this case)

void push(stack<int>& s, int a){
	// Your code goes here
	if(s.empty() || mini > a)
	    mini = a;
	
	s.push(a * dummy + mini);   
	//multiply the value with a dummy value and add the minimum to it so that we can obtain 
	//both the value and the mini using the dummy value
}

bool isFull(stack<int>& s, int n){
	// Your code goes here
	return s.size()==n;
}

bool isEmpty(stack<int>& s){
	// Your code goes here
	return s.empty();
}

int pop(stack<int>& s){
	// Your code goes here
	if(s.empty())
	    return -1;
	    
	int el = s.top()/dummy;
	s.pop();
	
	if(!s.empty())
	    mini = s.top()%dummy;
	else
	    mini = -1;
	//use the dummy to get both the mini and the value
	return el;
}

int getMin(stack<int>& s){
	// Your code goes here
	return mini;
}