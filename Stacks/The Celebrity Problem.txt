//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        stack<int> stk;
        
        for(int i=0; i<n; i++)
            stk.push(i);    //push all people into the stack
            
        while(stk.size() > 1){
            int i = stk.top();  //take out 2 people from the stack
            stk.pop();
            
            int j = stk.top();
            stk.pop();
            
            if(M[i][j]==0 && M[j][i]==1)    //if i doesnt know j but j knows i
                stk.push(i);
            else if(M[j][i]==0 && M[i][j]==1)
                stk.push(j);
        }
        
        //the only person remaining in the stack is a potential celebrity
        int k = stk.top();
        stk.pop();
        
        for(int i=0; i<n; i++){
            if(i==k)                        //no need to consider diagonals
                continue;
            
            if(M[i][k]==0 || M[k][i]==1)    //if k knows someone or if someone doesnt know k
                return -1;
        }
        
        return k;
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<vector<int> > M( n , vector<int> (n, 0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cin>>M[i][j];
            }
        }
        Solution ob;
        cout<<ob.celebrity(M,n)<<endl;

    }
}

// } Driver Code Ends