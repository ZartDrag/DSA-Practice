//{ Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//Function to return a tree created from postorder and inoreder traversals.
Node* traverse(int in[], int post[], int n, int &index, int preStart, int preEnd, unordered_map<int, int> &mp){
    //similar to "Construct Tree from Inorder & Preorder" question... just start the indexing from the end
    if(index<0 || preStart>preEnd)
        return NULL;
        
    Node *root = new Node(post[index]);
    
    int pos = mp[post[index]];
    index--;
    
    root->right = traverse(in, post, n, index, pos+1, preEnd, mp);
    root->left = traverse(in, post, n, index, preStart, pos-1, mp);
    //only the right branch needs to be called first
    return root;
}

Node *buildTree(int in[], int post[], int n) {
    
    unordered_map<int, int> mp;
    for(int i = 0; i<n; i++)
        mp[in[i]]=i;
        
    int startIndex = n-1;
    
    return traverse(in, post, n, startIndex, 0, n-1, mp);
}
