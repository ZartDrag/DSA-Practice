/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        queue<pair<TreeNode*, long long>> que;
        que.push({NULL, 0});
        que.push({root, 0});    
        //assigning an index to each node:
        //root would be 0, it children would be 2*ind+1 and 2*ind+2 like in heaps
        long long ans = INT_MIN;

        while(!que.empty()){
            auto top = que.front();
            que.pop();

            if(top.first){ 
                //if the node is not NULL, push its children into the queue with correct indices
                if(top.first->left)
                    que.push({top.first->left, (2 * top.second + 1) % 1000000000000});
                //using the mod to avoid overflow
                if(top.first->right)
                    que.push({top.first->right, (2 * top.second + 2) % 1000000000000});
            } else if(!que.empty()){
                //if the top is NULL, one level has finished
                ans = max(ans, (que.back().second - que.front().second + 1));
                que.push({NULL, 0});                
            }    
        }

        return ans;
    }
};