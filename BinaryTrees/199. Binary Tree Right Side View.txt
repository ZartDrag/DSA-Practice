/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void traverse(TreeNode *root, int dpt, map<int, int> &mp){
    
    if(!mp.count(dpt)){ //only insert the element if there exists no element at that depth
        mp[dpt]=root->val;
    }
        
    if(root->right)
        traverse(root->right, dpt+1, mp);
        
    if(root->left)
        traverse(root->left, dpt+1, mp);  
}
public:
    vector<int> rightSideView(TreeNode* root) {
    
       if(!root)
        return {};

        map<int, int> mp;

        traverse(root, 0, mp);

        vector<int> ans;
        for(pair<int, int> i : mp){
           ans.push_back(i.second);
        }

        return ans;
        
    }
};