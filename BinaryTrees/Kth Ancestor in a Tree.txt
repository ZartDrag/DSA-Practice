bool traverse(Node *root, int k, int node, vector<int> path, int &ans){
    if(!root)
        return false;
        
        
    path.push_back(root->data);   
    //ading nodes to the path
     
    if(root->data == node){
        //when the node is found
        int n = path.size();
        if(n>k)
            ans=path[n-k-1];
            //the answer would be the k-1th element from the end
        return true;
        //the element is found so return true
    }
    
    if(!traverse(root->left, k, node, path, ans))   
    //if element is found in the left branch no need to traverse the right side
        traverse(root->right, k, node, path, ans);
    
    return false;
    //false is returned if node is not found
}

int kthAncestor(Node *root, int k, int node)
{
    // Code here
    int ans = -1;
    traverse(root, k, node, {}, ans);
    
    return ans;
}