/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    pair<bool, int> check(TreeNode* root){
        //function return {if the tree is balanced, height of tree}
        if(!root)
            return make_pair(true, 0);
            //when root is null, height is 0 and the tree is balanced
        
        pair<bool, int> p = check(root->left);

        if(!p.first)    //if left is false, no need to check right
            return make_pair(false, 0);
            //if tree is not balanced, no need to check height anymore

        pair<bool, int> q = check(root->right);

        if(!q.first)
            return make_pair(false, 0);

        if(abs(p.second - q.second)>1)
            return make_pair(false, 0);
            //if height difference is greater than one, return false;

        return make_pair(true, 1+max(p.second, q.second));
        //this statement is only reached if tree is balanced. So calculate height and return
    }
public:
    bool isBalanced(TreeNode* root) {
        return check(root).first;
    }
};