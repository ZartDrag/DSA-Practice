vector<int> preorderTraversal(TreeNode* root) {
        
        TreeNode *curr = root;
        vector<int> ans;
        while(curr){
            // ans.push_back(curr->val);
            
            if(curr->left){
                TreeNode *pred = curr->left;  
                //finding the predecessor
                while(pred->right && pred->right!=curr){    
                    pred = pred->right;
                }

                if(!pred->right){ //link the predecessor to the current node
                    //curr is yet to travel here so go left
                    pred->right = curr;
                    ans.push_back(curr->val);
                    curr = curr->left;
                } else {    //this means the predecessor is linked to the current node
                    //this statement is reached when curr has already been here... so go right this time
                    pred->right = NULL;
                    curr = curr->right;
                }
            } else {
                ans.push_back(curr->val);
                curr = curr->right;
            }
        } 
        return ans;  
    }


// Recursive solution

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root)
            return NULL;

        if(root->val<p->val && root->val<q->val)
            return lowestCommonAncestor(root->right, p, q);
            //if root is smaller than both values, go right

        if(root->val>p->val && root->val>q->val)
            return lowestCommonAncestor(root->left, p, q);
            //go left if root is larger than both values

        return root;
        //this statement is only reached if root lies between both values
    }
};