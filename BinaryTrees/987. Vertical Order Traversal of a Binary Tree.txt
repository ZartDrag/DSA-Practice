/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    void traverse(TreeNode* root, map<int, map<int, multiset<int> > > &nodes, int ind, int dpt){
        //preorder traversal
        //question can be done using any order of traversal
        nodes[ind][dpt].insert(root->val); 
        //value inserted at (ind, dpt) position in the multiset which would store them in sorted fashion
        
        if(root->left)
            traverse(root->left, nodes, ind-1, dpt+1);
        //when going left, ind is decremented 
        
        if(root->right)
            traverse(root->right, nodes, ind+1, dpt+1);
        //ind is incremented while going right
        
        //dpt always increases while going down
    }
    
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        if(!root)
            return {};
        
        map<int, map<int, multiset<int> > > nodes;
        //the first map would hold the indexes
        //the second map would hold the depth
        //the multiset would store the elements in a sorted order
        
        traverse(root, nodes, 0, 0);
        
        vector<vector<int>> ans;
        
        for(auto i : nodes){
            vector<int> col;
            for(auto j : i.second){ //note: j runs on i.second not on i
                col.insert(col.end(), j.second.begin(), j.second.end());
            }
            ans.push_back(col);
        }
        
        return ans;
    }
};