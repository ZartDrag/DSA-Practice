/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool symmetric(TreeNode* n1, TreeNode* n2){
        if(!n1 && !n2)
            return true;    //only return true if both nodes are null at the same time
        
        if(!(n1 && n2))     //if only one of them is null, return false
            return false;

        if(n1->val!=n2->val)
            return false;   //if the values of the nodes are not equal then return false

        return symmetric(n1->left, n2->right) && symmetric(n1->right, n2->left);
                            //recursive call; only return true if both the calls are true
    }
public:
    bool isSymmetric(TreeNode* root) {
        return symmetric(root->left, root->right);
    }
};