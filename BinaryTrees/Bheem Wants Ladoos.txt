//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node* left;
    Node* right;
};

Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}

Node* buildTree(string str)
{   
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
    
    // Creating vector of strings from input 
    // string after spliting by space
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));
        
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
        
    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
            
        // Get the current node's value from the string
        string currVal = ip[i];
            
        // If the left child is not null
        if(currVal != "N") {
                
            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->left);
        }
            
        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        // If the right child is not null
        if(currVal != "N") {
                
            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}


// } Driver Code Ends
/*
// node structure:

struct Node
{
    int data;
    Node* left;
    Node* right;
};

*/



class Solution{
    void mapParent(Node *root, unordered_map<Node*, Node*> &up){
        if(root->left){
            up[root->left] = root;
            mapParent(root->left, up);
        }
        
        if(root->right){
            up[root->right] = root;
            mapParent(root->right, up);
        }
    }
    
    Node *findHome(Node *root, int home){
        queue<Node*> que; //finding home using level order traversal
        
        que.push(root);
        
        while(!que.empty()){
            Node *top = que.front();
            que.pop();
            if(top->data == home)
                return top;
            if(top->left)
                que.push(top->left);
            if(top->right)
                que.push(top->right);
        }
        
        return NULL;
    }
    
    int maxLadoos(Node *root, int K, unordered_map<Node*, Node*> &up, unordered_map<Node*, bool> &visited){
        int ans = root->data;
        visited[root] = true;
        
        if(!K)
            return ans;
        
        if(up.count(root) && !visited.count(up[root])){ 
            //if the root has a parent which hasnt been visited
            ans += maxLadoos(up[root], K-1, up, visited);
        }
        
        if(root->left && !visited.count(root->left)){ 
            //if the root has a left child which hasnt been visited
            ans += maxLadoos(root->left, K-1, up, visited);
        }
        
        if(root->right && !visited.count(root->right)){ 
            //if the root has a parent which hasnt been visited
            ans += maxLadoos(root->right, K-1, up, visited);
        }
        
        return ans;
    }
    public:
    int ladoos(Node* root, int home, int k)
    {
        // Your code goes here
        unordered_map<Node*, Node*> up;
        //to map children to their parents
        
        unordered_map<Node*, bool> visited;
        //would keep track of visited houses
        
        mapParent(root, up);
        
        Node *Home = findHome(root, home);
        
        return maxLadoos(Home, k, up, visited);
        
    }


};


//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    getchar();
    
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* root = buildTree(s);
        
        int home,k;
        cin>> home >> k;
        getchar();
        Solution obj;
        cout<< obj.ladoos(root,home,k) << endl;
    }
	return 0;
}


// } Driver Code Ends