/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>

using namespace std; 
//find the median of one array and find the subarrays from the other array 
//which are in ascending order having size greater than the median 
int findMedian(int *arr, int n){
    sort(arr, arr+n);
    
    if(n%2){
        return arr[n/2];
    }
    
    return (arr[n/2] + arr[n/2 - 1])/2;
}
int main()
{
    int arr1[] = {2, 2, 1, 3, 4, 6, 7, 3, 2, 3, 6, 3, 5, 6, 7, 3, 6, 9};
    int n = sizeof(arr1)/sizeof(int);
    
    int arr2[] = {1, 2, 3, 4, 6, 7, 8, 2, 3, 4, 5};
    int m = sizeof(arr2)/sizeof(int);
    
    int median = findMedian(arr1, n);
    cout<<"Median is " << median << endl;
    
    
    vector<vector<int>> subarrays;
    deque<int> que;
    for(int i = 0; i < m; i++){
        if(que.empty() || arr2[i] > que.back()){
            que.push_back(arr2[i]);
        } else {
            if(que.size() >= median){
                subarrays.push_back({que.begin(), que.end()});
            }
            que.clear();
            que.push_back(arr2[i]);
        }
    }
    subarrays.push_back({que.begin(), que.end()});
    
    for(auto i : subarrays){
        for(int j : i)
            cout<<j<<" ";
        cout<<endl;
    }
    

    return 0;
}
