class Solution {
    int dfs(vector<vector<int>>& adj, vector<int>& time, int ind, vector<int> &memo){
        if(memo[ind] != -1)
            return memo[ind];

        int n = adj.size();

        int ans = 0;
        for(int i : adj[ind]){
            ans = max(ans, dfs(adj, time, i, memo));
            //only the max time needs to be considered since all the other neighboring
            //courses would be completed meanwhile
        }

        return memo[ind] = ans + time[ind];
    }
public:
    int minimumTime(int n, vector<vector<int>>& relations, vector<int>& time) {
        vector<vector<int>> adj(n);
        vector<int> memo(n, -1);

        for(vector<int> &r : relations)
            adj[r[0] - 1].push_back(r[1] - 1);
        int res = 0;
        for(int i = 0; i < n; i++){
            res = max(res, dfs(adj, time, i, memo));
        }

        return res;
    }
};