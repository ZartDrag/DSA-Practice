class Solution {
public:
    string reorganizeString(string s) {
        bool unique = true;
        unordered_map<char, int> mp;

        for(char ch : s){   //map each character to its frequency
            if(mp.count(ch)){
                mp[ch]++;
                unique = false; //the flag would turn false if even 1 element is repeated
            } else {
                mp[ch] = 1;
            }
        }
        if(unique)      //if flag is true, then that means 
            return s;   //that all elements are unique and string can be returned as it is

        priority_queue<pair<int, char>> pq;

        for(auto p : mp){   //push the elements into the heap
            pq.push(make_pair(p.second, p.first));
        } 

        string ans = "";
        auto p = pq.top();
        pq.pop();
        ans.push_back(p.second);
        p.first--;  //this would be greater than 0 since it passed the unique check
        pq.push(p);

        // while(!pq.empty()){
        //     auto t = pq.top();
        //     pq.pop();
        //     cout<<"("<<t.first<<", "<<t.second<<") ";
        // }

        while(!pq.empty()){
            auto p1 = pq.top();
            pq.pop();
            
            char pch = ans[ans.size()-1]; //the latest added character
            if(p1.second != pch){    //if the last character is different, push it into ans
                ans.push_back(p1.second);
                p1.first--;         //decrement its frequency count
                if(p1.first)        //and push it back into pq if its freq > 0
                    pq.push(p1);
            } else {
                if(pq.empty())
                    return "";      //if no other element is left in pq then return NULL string
                auto p2 = pq.top(); //otherwise take another element from pq               
                pq.pop();
                pq.push(p1);        //put back the first one and work with the new element
                ans.push_back(p2.second);
                p2.first--;
                if(p2.first)
                    pq.push(p2);
            }
        }

        return ans;
    }
};