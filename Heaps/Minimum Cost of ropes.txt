//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    //Function to return the minimum cost of connecting the ropes.
    long long minCost(long long arr[], long long n) {
        // Your code here
        
        //the optimal approach would be to find the two shortest ropes every time and 
        //connecting them
        priority_queue<long long, vector<long long>, greater<long long>> min_heap(arr, arr+n);
        
        long long cost = 0;
        
        while(min_heap.size()>1) {
            long long rope1, rope2;         //find two shortest ropes
            rope1 = min_heap.top();
            min_heap.pop();
            rope2 = min_heap.top();
            min_heap.pop();
            long long ans = rope1 + rope2;  //connect them
            cost+=ans;                      //note their costs
            min_heap.push(ans);             //push the connected rope into the heap
        } ;
        
        return cost;
    }
};


//{ Driver Code Starts.

int main() {
    long long t;
    cin >> t;
    while (t--) {
        long long n;
        cin >> n;
        long long i, a[n];
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        cout << ob.minCost(a, n) << endl;
    }
    return 0;
}

// } Driver Code Ends