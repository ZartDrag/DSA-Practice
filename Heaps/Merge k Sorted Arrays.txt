//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
#define N 105
using namespace std;
void printArray(vector<int> arr, int size)
{
for (int i=0; i < size; i++)
	cout << arr[i] << " ";
}


// } Driver Code Ends
//User function Template for C++

class Node{         
    public:
    int val, row, col;
    Node(int v, int r, int c){
        val = v;
        row = r;
        col = c;
    }
};
    
class compare{  //comparator function to put Node objects in heaps
    public:
    bool operator()(Node n1, Node n2){
      return n1.val>n2.val;
  }  
};

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        //code here
        priority_queue<Node, vector<Node>, compare> heap;   //min heap
        for(int i=0; i<K; i++){
            Node temp(arr[i][0], i, 0); //Node objects would store the values along with the 
                                        //row and col of the value int the arr vector
            heap.push(temp);
        }
        
        vector<int> ans;    
        
        while(!heap.empty()){
            Node temp = heap.top();     //the smallest element would be on the top of the heap
            heap.pop();
            ans.push_back(temp.val);    //push its value in the heap
            if(temp.col+1<K){           //if there are more elements in that row
                Node temp2(arr[temp.row][temp.col+1], temp.row, temp.col+1);
                heap.push(temp2);       //then push the next element in that row into the heap
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int k;
	    cin>>k;
	    vector<vector<int>> arr(k, vector<int> (k, 0));
	    for(int i=0; i<k; i++){
	        for(int j=0; j<k; j++)
	        {
	            cin>>arr[i][j];
	        }
	    }
	    Solution obj;
    	vector<int> output = obj.mergeKArrays(arr, k);
    	printArray(output, k*k);
    	cout<<endl;
    }
	return 0;
}






// } Driver Code Ends