//{ Driver Code Starts
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};


// } Driver Code Ends
/* Structure of the linked list node is as
struct Node 
{
    int data;
    struct Node* next;
    Node(int x) { data = x;  next = NULL; }
};
*/


class Solution{
    Node *findMid(Node *head){
        if(!head || !head->next)
            return head;
        
        Node *fast = head->next;
        
        while(fast && fast->next){
            fast = fast->next->next;
            head = head->next;
        }
        
        return head;
    }
    
    Node *merge(Node *left, Node *right){
        Node *mergedList = new Node(-1);    //dummy node
        Node *lTrav = left, *rTrav = right, *newTrav = mergedList;
        
        while(lTrav && rTrav){
            if(lTrav->data < rTrav->data){
                newTrav->next = lTrav;
                lTrav = lTrav->next;
            } else {
                newTrav->next = rTrav;
                rTrav = rTrav->next;
            }
            newTrav = newTrav->next;
        }
        
        if(lTrav)
            newTrav->next = lTrav;
        else if(rTrav)
            newTrav->next = rTrav;
            
        newTrav = mergedList;
        mergedList = mergedList->next;
        delete newTrav;
        
        return mergedList;
    }
  public:
    //Function to sort the given linked list using Merge Sort.
    Node* mergeSort(Node* head) {
        // your code here
        if(!head || !head->next)
            return head;
            
        Node *mid = findMid(head);
        
        Node *left = head;
        Node *right = mid->next;
        mid->next = NULL;
        
        left = mergeSort(left);
        right = mergeSort(right);
        
        return merge(left, right);
    }
};


//{ Driver Code Starts.

void printList(Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

void push(struct Node** head_ref, int new_data) {
    Node* new_node = new Node(new_data);

    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

int main() {
    long test;
    cin >> test;
    while (test--) {
        struct Node* a = NULL;
        long n, tmp;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> tmp;
            push(&a, tmp);
        }
        Solution obj;
        a = obj.mergeSort(a);
        printList(a);
    }
    return 0;
}
// } Driver Code Ends