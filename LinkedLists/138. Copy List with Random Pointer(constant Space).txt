/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)
            return NULL;
            
        Node* trav = head;

        while(trav){
            Node *temp = new Node(trav->val);   //creating a copy(without random pointers) of each node next to it
            temp->next = trav->next;
            trav->next = temp;
            trav = temp->next;
        }

        Node* newTrav = head->next;
        trav = head;

        while(newTrav && newTrav->next){
            if(trav->random)
                newTrav->random = trav->random->next;   //since the new node is always next to the old node
            trav = trav->next->next;
            newTrav = newTrav->next->next;
        }
        if(trav->random)
                newTrav->random = trav->random->next;       

        //separating the new list from the old one

        trav = head;
        newTrav = head->next;
        Node *newHead = newTrav;

        while(newTrav && newTrav->next){
            trav->next = trav->next->next;
            newTrav->next = newTrav->next->next;
            trav = trav->next;
            newTrav = newTrav->next;
        }
        trav->next = NULL;
        return newHead;
    }
};