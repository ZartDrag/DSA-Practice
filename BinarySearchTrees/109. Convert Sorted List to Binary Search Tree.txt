/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    pair<ListNode*, ListNode*> findMid(ListNode *head){
        if(!head)
            return {NULL, NULL};
        ListNode *fast = head;
        ListNode *prev = NULL;
        while(fast && fast->next && fast->next->next){
            prev = head;
            head = head->next;
            fast = fast->next->next;
        }
        return make_pair(head, prev);   //return mid node and the node just before it
    }

public:
    TreeNode *sortedListToBST(ListNode* head) {
        pair<ListNode*, ListNode*> midPrev = findMid(head);
        if(!midPrev.first)
            return NULL;
        TreeNode *root = new TreeNode(midPrev.first->val);

        if(midPrev.second){
            midPrev.second->next = NULL;    //the node before the middle node should point to NULL
            root->left = sortedListToBST(head);
        }
        
        root->right = sortedListToBST(midPrev.first->next);
        return root;
    }
};