/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        int m = min(p->val, q->val), n = max(p->val, q->val);
        //m is the lower of the two values and n is the higher

        while(root){
            if(m <= root->val && root->val <= n)
                return root;    
            //if root is larger than m and smaller than n, that means m is in its left
            //subtree and n is in its right subtree; it would be the answer
            
            if(root->val <= m){
                root = root->right;
            //if root is smaller than the smaller of the two values, go right
            } else {
                root = root->left;
            //go left otherwise
            }
        }
        return NULL;
    }
};