/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* constructTree(vector<int> &preorder, int l, int h, int &ind){
        //at every instance, we specify the range of valid values 
        if(l>h || ind == preorder.size())
            return NULL;

        TreeNode *root = NULL;
        if(l < preorder[ind] && preorder[ind] < h){
            //if the element at the current index lies in the range, a new node is created
            root = new TreeNode(preorder[ind]);
            ind++;
            root->left = constructTree(preorder, l, root->val, ind);   
            root->right = constructTree(preorder, root->val, h, ind);     
        }           
        return root;
    }
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int ind = 0;
        return constructTree(preorder, INT_MIN, INT_MAX, ind);
    }
};