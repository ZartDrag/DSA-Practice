/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>

using namespace std;
struct Node{
    int key;
    Node *left, *right;
    
    Node(int k){
        key = k;
        left = NULL;
        right = NULL;
    }
};

Node *insertBST(Node *root, int key){
    if(!root){
        root = new Node(key);
        return root;
    }
    
    if(key < root->key){
        root->left = insertBST(root->left, key);
    } else {
        root->right = insertBST(root->right, key);
    }
    
    return root;
}

void inOtrav(Node *root, vector<int> &ans){
    if(!root)
        return;
    inOtrav(root->left, ans);
    ans.push_back(root->key);
    inOtrav(root->right, ans);
}

void postOtrav(Node *root, vector<int> &ans){
    if(!root)
        return;
    postOtrav(root->left, ans);
    postOtrav(root->right, ans);
    ans.push_back(root->key);
}

void preOtrav(Node *root, vector<int> &ans){
    if(!root)
        return;
    ans.push_back(root->key);
    preOtrav(root->left, ans);
    preOtrav(root->right, ans);
}

void levelOTrav(Node *root, vector<int> &ans){
    queue<Node*> trav;
    trav.push(root);
    
    while(trav.size()){
        Node *temp = trav.front();
        ans.push_back(temp->key);
        if(temp->left)
            trav.push(temp->left);
        if(temp->right)
            trav.push(temp->right);
    }
}

int count(Node *root){
    if(!root)
        return 0;
    
    return 1 + count(root->left) + count(root->right);
}

int height(Node *root){
    if(!root)
        return 0;
    
    return 1 + max(count(root->left), count(root->right));
}

int noOfLeaves(Node *root){
    if(!root)
        return 0;
    
    if(!root->left && !root->right)
        return 1;
    
    return noOfLeaves(root->left) + noOfLeaves(root->right);
}
void print(vector<int> &ans){
    for(int i : ans)
        cout<<i<<" ";
    cout<<endl;
}

int main()
{
    Node *root;
    while(1){
        cout<<"1: Insert into tree\n";
        cout<<"2: In Order Traversal\n";
        cout<<"3: Pre Order Traversal\n";
        cout<<"4: Post Order Traversal\n";
        cout<<"5: Level Order Traversal\n";
        cout<<"6: Count Elements\n";
        cout<<"7: Exit\n";
        int n;
        cin>>n;
        
        vector<int> trav;
        switch(n){
            case 1:
                cout<<"Enter key: ";
                cin>>n;
                root = insertBST(root, n);
            break;
            
            case 2:
                inOtrav(root, trav);
                print(trav);
            break;
            
            case 3:
                postOtrav(root, trav);
                print(trav);
            break;
            
            case 4:
                preOtrav(root, trav);
                print(trav);
            break;
            
            case 5:
                levelOTrav(root, trav);
                print(trav);
            break;
                
            case 6:
                cout<<"count = "<<count(root)<<endl;;
            break;
            
            default:
                exit(0);
        }
    }   

    return 0;
}
