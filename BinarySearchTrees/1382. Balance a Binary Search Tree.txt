/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void inOrderTrav(TreeNode* root, vector<int> &inO){
        if(!root)
            return;
        inOrderTrav(root->left, inO);
        inO.push_back(root->val);
        inOrderTrav(root->right, inO);
    }

    TreeNode* balance(vector<int> &inO, int i, int j){
        if(i>j)
            return NULL;
        int mid = i+(j-i)/2;
        TreeNode* root = new TreeNode(inO[mid]);
        root->left = balance(inO, i, mid-1);
        root->right = balance(inO, mid+1, j);
        return root;
    }
public:
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> inO;
        inOrderTrav(root, inO);

        return balance(inO, 0, inO.size()-1);
    }
};