#include <bits/stdc++.h> 
/*************************************************************
    
    Following is the Binary Tree node structure:

    class TreeNode{

        public :
            int data;
            TreeNode *left;
            TreeNode *right;

            TreeNode(int data) {
                this -> data = data;
                left = NULL;
                right = NULL;
            }

            ~TreeNode() {
            if (left){
            delete left;
            }

            if (right){
            delete right;
            }
        }   
    };

*************************************************************/
void bSTtoDLL(TreeNode<int>* root, TreeNode<int>* &head){
    if(!root)
        return;
    
    bSTtoDLL(root->right, head);
    //converts the right subtree into DLL
    
    root->right = head;
    //the right part of root points to the head of the DLL
    if(head)
        head->left = root;
    //the left part of the head, if it exists, points to the root
    
    head = root;
    //the root becomes part of the DLL now, so it becomes the head
    
    bSTtoDLL(root->left, head);
    //make the left subtree part of the DLL too
}

TreeNode<int>* mergeDLLs(TreeNode<int> *head1, TreeNode<int> *head2){
    TreeNode<int> *root, *trav;
    //initially, set the smaller of the two nodes as the root
    if(head1->data < head2->data){
        root=head1;
        head1=head1->right;
    } else {
        root=head2;
        head2=head2->right;
    }
    trav = root;
    //trav would traverse through the DLL
    while(head1 && head2){
        if(head1->data<head2->data){
            trav->right = head1;
            head1->left = trav;
            head1 = head1->right;
        } else {
            trav->right = head2;
            head2->left = trav;
            head2 = head2->right;
        }    //link the smaller of the two nodes to trav
        trav = trav->right;
    }
    if(head1){
        trav->right = head1;
        head1->left = trav;
    } else {
        trav->right = head2;
        head2->left = trav;
    } //link the remaining nodes to trav
    
    return root;
}

TreeNode<int> *createBSTfromDLL(TreeNode<int> *&head, int n){
    //n would contain the no. of nodes in the BST
    if(!head || n<=0)
        return NULL;
    
    TreeNode<int> *left, *root;
    left = createBSTfromDLL(head, n/2);
    
    root = head;    
    root->left = left;    
    head = head->right;
    root->right = createBSTfromDLL(head, n-n/2-1);
    
    return root;    
}

TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    // Write your code here.
    TreeNode<int> *head1=NULL, *head2=NULL;
    bSTtoDLL(root1, head1);
    bSTtoDLL(root2, head2);
    TreeNode<int> *head = mergeDLLs(head1, head2);
    int n = 0;
    TreeNode<int> *temp = head;
    while(temp){
        temp = temp->right;
        n++;
    }
    return createBSTfromDLL(head, n);
}