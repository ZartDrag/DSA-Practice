//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Item{
    int value;
    int weight;
};


// } Driver Code Ends
//class implemented
/*
struct Item{
    int value;
    int weight;
};
*/

bool compareVal(Item I1, Item I2){
    //sort based on value per unit weight
    return (1.0*I1.value/I1.weight) > (1.0*I2.value/I2.weight);
}
class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        sort(arr, arr+n, compareVal);
        double value = 0;
        
        for(int i=0; i<n && W>0; i++){
            if(W >= arr[i].weight){ 
                //if the knapsack can hold the whole item then put it in
                value += arr[i].value;
                W -= arr[i].weight;
            } else {
                //otherwise put in as much as it can fit
                value += (1.0*arr[i].value/arr[i].weight)*W;
                W = 0;
                break;
            }
        }
        
        return value;
    }
        
};


//{ Driver Code Starts.
int main()
{
	int t;
	//taking testcases
	cin>>t;
	cout<<setprecision(2)<<fixed;
	while(t--){
	    //size of array and weight
		int n, W;
		cin>>n>>W;
		
		Item arr[n];
		//value and weight of each item
		for(int i=0;i<n;i++){
			cin>>arr[i].value>>arr[i].weight;
		}
		
		//function call
		Solution ob;
		cout<<ob.fractionalKnapsack(W, arr, n)<<endl;
	}
    return 0;
}
// } Driver Code Ends