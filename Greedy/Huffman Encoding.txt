//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    struct Node{
        int val;
        Node *left, *right;
        
        Node(int data){
            val = data;
            left = NULL;
            right = NULL;
        }
    };
    
    class cmp{
        public:
        bool operator()(Node *a, Node *b){
            return a->val > b->val;
        }
    };
    
    void traversal(Node *root, string path, vector<string> &ans){
        if(!root->left && !root->right){
            ans.push_back(path);
            return;
        }
        traversal(root->left, path + '0', ans);     //while going down the left branch add a '0' to the path
        traversal(root->right, path + '1', ans);    //add '1' while going right
    }
	public:
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    // Code here
		    priority_queue<Node*, vector<Node*>, cmp> minHeap;
		    
		    for(int i = 0; i < N; i++)
		        minHeap.push(new Node(f[i]));
		    
		    while(minHeap.size() > 1){
		        Node *left = minHeap.top(); //find the two smallest nodes using a min head
		        minHeap.pop();
		        Node *right = minHeap.top();
		        minHeap.pop();
		        
		        Node *top = new Node(left->val + right->val);   
		                        //make a new node with the value as the sum of their values
		        top->left = left;
		        top->right = right; //attach the nodes to the new node
		        minHeap.push(top);  //push the new node back into the heap
		    }
		    
		    Node *root = minHeap.top(); //the last remaining value in the heap is the root node
		    minHeap.pop();
		    
		    vector<string> ans;
		    
		    traversal(root, "", ans);   //traverse the so created tree
		    
		    return ans;
		}
};

//{ Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
	    string S;
	    cin >> S;
	    int N = S.length();
	    vector<int> f(N);
	    for(int i=0;i<N;i++){
	        cin>>f[i];
	    }
	    Solution ob;
	    vector<string> ans = ob.huffmanCodes(S,f,N);
	    for(auto i: ans)
	    	cout << i << " ";
	    cout << "\n";
    }
	return 0;
}
// } Driver Code Ends