class Solution {
    bool tripsPossible(long long currTime, vector<int> &time, int totTrips){
        int trips = 0;
        int n = time.size();
        for(int i=0; i<n; i++){
            trips += currTime / time[i];
            if(trips >= totTrips)
                return true;
        }
        return false;
    }
public:
    long long minimumTime(vector<int>& time, int totalTrips) {
        long long l = *min_element(time.begin(), time.end());
        long long h = l * totalTrips;
        long long ans = -1;
        while(l <= h){
            long long mid = l + (h-l)/2;
            if(tripsPossible(mid, time, totalTrips)){
                h = mid-1;
                ans = mid;
            } else {
                l = mid+1;
            }
        }

        return ans;
    }
};