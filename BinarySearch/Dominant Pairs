class Solution{
public:
    int dominantPairs(int n, vector<int> &arr){
        // Code here
        sort(arr.begin(), arr.begin() + n/2); //sort the first half of the array
        int count = 0;                        //count to keep track of the answer
        
        for(int i=n/2; i<n; i++){
            //i is iterating over the second half of the array
            int low = 0, high = n/2-1;
            int immLarEl = -1;                
            //finding the index of the element which is immediately larger than 5 * arr[i]
            //using binary search
            
            while(low <= high){
                int mid = low + (high - low)/2;
                if(arr[mid] >= arr[i] * 5){
                    immLarEl = mid;
                    high = mid - 1;
                } else 
                    low = mid + 1;
            }
            
            //all the elements after the immediately larger element would satisfy the condition
            if(immLarEl > -1)           //so adding them to the count
                count += n/2 - immLarEl;
        }
        return count;
    }  
};
