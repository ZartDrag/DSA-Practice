//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Trie{
    struct Node{
        Node *child[26];
        bool endHere;
        
        Node(){
            for(int i=0; i<26; i++)
                child[i] = NULL;
            endHere = false;
        }
    } *root;
    
    public:
    
    Trie(){
        root = new Node();
    }
    
    void addWord(string word){
        Node *node = root;
        
        for(char ch : word){
            int c = ch - 'a';
            if(!node->child[c])
                node->child[c] = new Node();
            node = node->child[c];
        }
        node->endHere = true;
    }
    
    bool checkPrefix(string word){
        Node *node = root;
        
        for(char ch : word){
            int c = ch - 'a';
            if(!node->child[c])
                return false;
            node = node->child[c];
        }
        return true;
    }
};
class Solution{
public:
    int prefixSuffixString(vector<string> &s1,vector<string> s2){
        // Code here
        Trie *trie = new Trie();
        //create a new tree
        
        for(string s : s1){
            trie->addWord(s);
            //add each word (for prefix)
            reverse(s.begin(), s.end());
            //and its reverse(for suffix) into the trie
            trie->addWord(s);
        }
        int count = 0;
        for(string s : s2){
            if(trie->checkPrefix(s))
                count++;
            else{
                reverse(s.begin(), s.end());
                if(trie->checkPrefix(s))
                    count++;
            }
        }
        
        return count;
    }
};

//{ Driver Code Starts.


int main(){
    int t;
    cin>>t;
    for(int i=0;i<t;i++){
        string str1,str2,newline;
        if(i==0)
        getline(cin,newline);
        getline(cin,str1);
        getline(cin,str2);
        // getline(cin,newline);
        // cout<<str1<<endl<<str2<<endl;
        vector<string> s1,s2;
        stringstream ss1(str1);
        stringstream ss2(str2);
        string str;
        while(ss1>>str){
            s1.push_back(str);
        }
        while(ss2>>str){
            s2.push_back(str);
        }
        Solution ob;
        cout<<ob.prefixSuffixString(s1, s2)<<endl;
    }
}
// } Driver Code Ends