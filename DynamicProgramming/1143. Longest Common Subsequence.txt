class Solution {
    
    int memSolve(string &text1, string &text2, int i, int j, vector<vector<int>> &dp){        
        if(i==text1.length())
            return 0;
        
        if(j==text2.length())
            return 0;
        
        if(dp[i][j]!=-1) 
            return dp[i][j];
        
        if(text1[i] == text2[j]){
            return dp[i][j]=1+memSolve(text1, text2, i+1, j+1, dp);
        } else {
            return dp[i][j]=max(memSolve(text1, text2, i+1, j, dp), memSolve(text1, text2, i, j+1, dp));
        }
    }
    
    int tabSolve(string text1, string text2){
        int m = text1.length(), n = text2.length();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for(int i=m-1; i>=0; i--){
            for(int j=n-1; j>=0; j--){
                if(text1[i] == text2[j]){
                    dp[i][j]=1+dp[i+1][j+1];
                } else {
                    dp[i][j]=max(dp[i+1][j], 
                                        dp[i][j+1]);
                }
            }
        }
        
        return dp[0][0];
    }
    
    int opti(string text1, string text2){
        int m = text1.length(), n = text2.length();
        // vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        vector<int> curr(n+1, 0), next(n+1, 0);
        
        for(int i=m-1; i>=0; i--){
            for(int j=n-1; j>=0; j--){
                if(text1[i] == text2[j]){
                    curr[j]=1+next[j+1];
                } else {
                    curr[j]=max(next[j], 
                                        curr[j+1]);
                }
            }
            next=curr;
        }
        
        return curr[0];
    }
    
public:
    int longestCommonSubsequence(string text1, string text2) {
        
        
        return opti(text1, text2);
        
        // return tabSolve(text1, text2);
        
//         int m = text1.length(), n = text2.length();
//         vector<vector<int>> dp(m, vector<int>(n, -1));
        
//         return memSolve(text1, text2, 0, 0, dp);
    }
};