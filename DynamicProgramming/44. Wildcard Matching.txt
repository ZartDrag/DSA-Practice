class Solution {
    
    bool memSolve(string &s, string &p, int i, int j, vector<vector<int>> &dp){
        if(i==0 && j==0)
            return true;
        
        if(i > 0 && j == 0) 
            return false;
        
        if(i == 0 && j > 0){
            for(int k=1; k<=j; k++){
                if(p[k-1]!='*')
                    return false;
            }
            return true;
        }
        
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        if(s[i-1] == p[j-1] || p[j-1] == '?')
            return dp[i][j]=memSolve(s, p, i-1, j-1, dp);
        
        if(p[j-1] == '*'){
            bool emp = memSolve(s, p, i, j-1, dp); //replacing * with an empty string
            
            bool que = memSolve(s, p, i-1, j, dp); //replacing * with "*?"
            
            return dp[i][j]=(emp || que);
        } 
        
        return dp[i][j]=false;
    }
    
    bool tabSolve(string &s, string &p){
        int m = s.size(), n = p.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        
        dp[0][0] = 1;
        
        
        for(int j=1; j<=n; j++){
            bool flag = true;
            for(int k=1; k<=j; k++){
                if(p[k-1]!='*'){
                    flag = false;
                    break;    
                }
            }
            dp[0][j]=flag;
        }
        
        for(int i=1; i<=m; i++){            
            for(int j=1; j<=n; j++){
                
                if(s[i-1] == p[j-1] || p[j-1] == '?')
                    dp[i][j]=dp[i-1][j-1];
                
                else if(p[j-1] == '*'){
                    bool emp = dp[i][j-1]; //replacing * with an empty string

                    bool que = dp[i-1][j]; //replacing * with "*?"

                    dp[i][j]=(emp || que);
                
                } else
                    dp[i][j]=false;
            }
            
        }
        
        return dp[m][n];
    }
    
    bool opti(string &s, string &p){
        int m = s.size(), n = p.size();
        vector<int> curr(n+1, 0), prev(n+1, 0);
        
        
        prev[0] = 1;
        
        
        for(int j=1; j<=n; j++){
            bool flag = true;
            for(int k=1; k<=j; k++){
                if(p[k-1]!='*'){
                    flag = false;
                    break;    
                }
            }
            prev[j]=flag;
        }
        
        for(int i=1; i<=m; i++){            
            for(int j=1; j<=n; j++){
                
                if(s[i-1] == p[j-1] || p[j-1] == '?')
                    curr[j]=prev[j-1];
                
                else if(p[j-1] == '*'){
                    bool emp = curr[j-1]; //replacing * with an empty string

                    bool que = prev[j]; //replacing * with "*?"

                    curr[j]=(emp || que);
                
                } else
                    curr[j]=false;
            }
            prev = curr;            
        }
        
        return prev[n];
    }
    
    
public:
    bool isMatch(string s, string p) {
        
        return opti(s, p);
        
        // return tabSolve(s, p);
        
        // vector<vector<int>> dp(s.size()+1, vector<int>(p.size()+1, -1));
        // return memSolve(s, p, s.size(), p.size(), dp);
    }
};