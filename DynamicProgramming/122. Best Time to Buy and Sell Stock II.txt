class Solution {
    
    int memSolve(vector<int>& prices, int ind, bool buy, vector<vector<int>> &dp){
        int n=prices.size();
        
        if(ind == n) return 0;
        
        if(dp[ind][buy]!=-1) return dp[ind][buy];
                
        int exc = memSolve(prices, ind+1, buy, dp);         //the case when so stock is sold or bought on that day or when its 
                                                            //sold and bought on the same day
        
        int inc;
        
        if(buy){    //if no stock is held, buy would be equal to 1
            inc = memSolve(prices, ind+1, 0, dp) - prices[ind]; //so its allowed to buy a stock on this day
                                                                //since buying costs money, the price is negated before adding
        } else {    //if a stock is held, buy would be 0
            inc = memSolve(prices, ind+1, 1, dp) + prices[ind]; //when selling, the price of the stock is added
        }
        
        return dp[ind][buy]=max(inc, exc);
    }
    
    int tabSolve(vector<int>& prices){
        int n=prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        
        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<=1; buy++){
                int exc = dp[i+1][buy];

                int inc;
                
                if(buy){
                    inc = dp[i+1][0] - prices[i];
                } else {
                    inc = dp[i+1][1] + prices[i];
                }
                
                dp[i][buy]=max(inc, exc);
                
            }
            
        }
        
        return dp[0][1];
    }
    
    int opti(vector<int>& prices){
        int n=prices.size();
        // vector<vector<int>> dp(n+1, vector<int>(2, 0));
        
        vector<int> curr={0, 0}, next={0, 0};
        
        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<=1; buy++){
                int exc = next[buy];

                int inc;
                
                if(buy){
                    inc = next[0] - prices[i];
                } else {
                    inc = next[1] + prices[i];
                }
                
                curr[buy]=max(inc, exc);                
            }
            next=curr;            
        }
        
        return curr[1];
    }
        
    public:
    int maxProfit(vector<int>& prices) {
        
        return opti(prices);
        
        // return tabSolve(prices);
        
        // int n = prices.size();
        // vector<vector<int>> dp(n, vector<int>(2, -1));
        // return memSolve(prices, 0, true, dp);
    }
};