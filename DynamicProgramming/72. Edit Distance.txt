class Solution {
    
    int memSolve(string word1, string word2, int i, int j, vector<vector<int>> &dp){
        if(i == word1.size())
            return word2.size()-j;      //insert the remaining characters in word 2
        if(j == word2.size())
            return word1.size()-i;      //delete the remaining characters in word 1
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        int ans = INT_MAX;
        
        if(word1[i] == word2[j]){   //if the letter is common is same in both words, skip the instance
            return dp[i][j]=memSolve(word1, word2, i+1, j+1, dp);
        } else {
            //insert
                ans = min(ans, memSolve(word1, word2, i, j+1, dp)+1);   
            //delete
                ans = min(ans, memSolve(word1, word2, i+1, j, dp)+1);
            //replace
                ans = min(ans, memSolve(word1, word2, i+1, j+1, dp)+1);
        }
        
        return dp[i][j]=ans;
    }


    int tabSolve(string word1, string word2){
        
        int m = word1.size(), n = word2.size();
        
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
                             
        for(int j=0; j<=n; j++){
            dp[m][j] = n-j; 
        }
        
        for(int i=0; i<=m; i++){
            dp[i][n] = m-i; 
        }
        
        
        for(int i = m-1; i>=0; i--){
            for(int j = n-1; j>=0; j--){
                int ans;
                if(word1[i] == word2[j]){
                    ans=dp[i+1][j+1];
                } else {    
                //insert
                    ans = dp[i][j+1]+1;
                //delete
                    ans = min(ans, dp[i+1][j]+1);
                //replace
                    ans = min(ans, dp[i+1][j+1]+1);
                }
        
                dp[i][j]=ans;

                }
                
            }        
            
        return dp[0][0];
   }
    
    int opti(string word1, string word2){
        
        int m = word1.size(), n = word2.size();
        if(m==0)
            return n;
        if(n==0)
            return m;
        
        vector<int> curr(n+1, 0), next(n+1, 0);
                             
        for(int j=0; j<=n; j++){
            next[j] = n-j;                          //fixing row
        }
        
        for(int i = m-1; i>=0; i--){
            for(int j = n-1; j>=0; j--){
                curr[n] = m-i;                      //fixing column
                int ans;
                if(word1[i] == word2[j]){
                    ans=next[j+1];
                } else {    
                //insert
                    ans = curr[j+1]+1;
                //delete
                    ans = min(ans, next[j]+1);
                //replace
                    ans = min(ans, next[j+1]+1);
                }
        
                curr[j]=ans;

                }
            
            next=curr;                
            }        
            
        return curr[0];
   }
public:
    int minDistance(string word1, string word2) {
        
        return opti(word1, word2);
        
        // return tabSolve(word1, word2);
        
        // vector<vector<int>> dp(word1.length(), vector<int>(word2.length(), -1));
        // return memSolve(word1, word2, 0, 0, dp);
    }
};