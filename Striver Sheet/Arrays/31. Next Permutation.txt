class Solution {
    vector<int>::iterator find1stLargerElement(vector<int> &nums, int ind){
        //works on the fact that every element in front of the current element is sorted in descending order
        //the enclosing condition ensures that
        int n = nums.size();
        for(int i = n-1; i > ind; i--){
            if(nums[i] > nums[ind])
                return nums.begin() + i;    
                //returns the element which is just larger than the given element
        }

        return nums.end();
    }
public:
    void nextPermutation(vector<int>& nums) {
        for(int i=nums.size()-1; i>0; i--){
            //starting from the right side, find the first element which is not descending
            if(nums[i-1] < nums[i]){
                auto larger = find1stLargerElement(nums, i-1);              
                //find the element just larger than it      
                swap(*larger, nums[i-1]);
                //swap the two
                sort(nums.begin() + i, nums.end());
                //sort the elements after it
                return;
            }
        }
        
        reverse(nums.begin(), nums.end());
        //control will only reach here if nums is in descending order
        //In that case, we need to return the array in ascending order. So we'll reverse it
        
    }
};s